library(plotly)
library(dplyr)
library(readxl)
library(plotly)
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/26. Data Visualization Using Plotly")
file <- "salesworkload_master.xlsx"
df <- read_xlsx(file)
View(df)
?cast
library(reshape2)
?cast
?melt
df_reshape <- df %>% melt("value")
df_reshape <- df %>% melt(c("id"))
View(df_reshape)
df_reshape <- df %>% melt(c("id","Store name","Region","Scheme"))
View(df_reshape)
df_reshape <- df_reshape %>% rename(period = variable, sales = value)
library(writexl)
write_xlsx(df_reshape,"salesworkload_tabular.xlsx")
## Importing Data
file <- "salesworkload_tabular.xlsx"
df <- read_xlsx(file)
View(df)
## Simple Barchart : Sales for UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,period) %>% summarise(total_sales = sum(sales))
View(df_uk)
# Plotting
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales)
plot
# Line Chart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "line")
plot
# Line Chart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, mode = "lines")
plot
# Line Chart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter",mode = "lines")
plot
## Stacked Barchart : Sales by Type in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,Scheme,period) %>% summarise(total_sales = sum(sales))
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$Scheme)
plot
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$Scheme, type = "stacked")
plot
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$Scheme, type = "stack")
plot
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$Scheme, barmode = "stack")
plot
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$Scheme, barmode = "stacked")
plot
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$Scheme) %>% layout(barmode = "stack")
plot
## Stacked Barchart : Sales by Store in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,`Store name`,period) %>% summarise(total_sales = sum(sales))
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$`Store name`) %>% layout(barmode = "stack")
plot
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/27. Data Visualization Using Plotly - Part 2")
library(dplyr)
library(readxl)
library(plotly)
## Importing Data
file <- "salesworkload_tabular.xlsx"
df <- read_xlsx(file)
View(df)
str(df_uk)
str_df
str(df)
## Vertical Barchart : Sales per Country in 2010
# Data Aggregation
df_sales <- df %>% filter(period == "2010") %>% group_by(Region) %>% summarise(total_sales = sum(sales))
View(df_sales)
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_uk$Region, y = df_uk$total_sales) %>% layout(orientation = "v")
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$Region, y = df_sales$total_sales) %>% layout(orientation = "v")
plot
## Horizontal Barchart : Sales per Country in 2010
# Data Aggregation
df_sales <- df %>% filter(period == "2010") %>% group_by(Region) %>% summarise(total_sales = sum(sales))
View(df_sales)
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$Region, y = df_sales$total_sales) %>% layout(orientation = "h")
plot
# Plotting Barchart
plot <- plot_ly(df_sales, y = df_sales$Region, x = df_sales$total_sales) %>% layout(orientation = "h")
plot
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$total_sales, y = df_sales$Region, ) %>% layout(orientation = "h")
plot
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$total_sales, y = df_sales$Region, ) %>% layout(orientation = "h")
plot
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$total_sales, y = df_sales$Region ) %>% layout(orientation = "h")
plot
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$total_sales, y = df_sales$Region,type = "bar" ) %>% layout(orientation = "h")
plot
# Plotting Barchart
plot <- plot_ly(df_sales, x = df_sales$total_sales, y = df_sales$Region,type = "bar",orientation = "h")
plot
## Histogram : Sales Profile in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,`Store name`,period) %>% summarise(total_sales = sum(sales))
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$total_sales, type = "hist")
plot
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$total_sales, type = "histogram")
plot
## Histogram : Sales Profile in UK in 2011
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom" && period == "2011") %>% group_by(Region,`Store name`) %>%
summarise(total_sales = sum(sales))
View(df_uk)
## Histogram : Sales Profile in UK in 2011
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% filter(period == "2011") %>% group_by(Region,`Store name`) %>%
summarise(total_sales = sum(sales))
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$total_sales, type = "histogram")
plot
## Histogram : Sales Profile in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,`Store name`) %>% summarise(total_sales = sum(sales))
View(df_uk)
## Histogram : Sales Profile in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,`Store name`)
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$sales, type = "histogram")
plot
## Histogram : Sales Profile in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% filter(period == "2011") %>% group_by(Region,`Store name`)
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$sales, type = "histogram")
plot
## Histogram : Sales Profile in UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,`Store name`)
View(df_uk)
# Plotting Barchart
plot <- plot_ly(df_uk, x = df_uk$sales, type = "histogram")
plot
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/28. Data Visualization Using Plotly - Part 3")
library(dplyr)
library(readxl)
library(plotly)
## Importing Data
file <- "salesworkload_tabular.xlsx"
df <- read_xlsx(file)
View(df)
library(dplyr)
library(readxl)
library(plotly)
## Importing Data
file <- "salesworkload_tabular.xlsx"
df <- read_xlsx(file)
View(df)
## Plotting Stacked Barchart
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,period) %>% summarise(total_sales = sum(sales))
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales)
plot
## Plotting Stacked Barchart
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,`Store name`,period) %>% summarise(total_sales = sum(sales))
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, name = df_uk$`Store name`) %>% layout(barmode = "stack")
plot
# Hide Legends
plot_legend <- plot %>% layout(showlegend = FALSE)
plot_legend
# Changing Legend Orientation
plot_legend <- plot %>% layout(legend = list(orientation = "h"))
plot_legend
# Changing Legend Orientation
plot_legend <- plot %>% layout(legend = list(orientation = "h"))
plot_legend
# Legend Title
plot_legend <- plot %>% layout(legend = list(orientation = "h",title = "Store Name"))
plot_legend
# Legend Title
plot_legend <- plot %>% layout(legend = list(orientation = "h",title = list(text = "Store Name")))
plot_legend
# Legend Title
plot_legend <- plot %>% layout(legend = list(orientation = "v",title = list(text = "Store Name")))
plot_legend
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/26. Data Visualization Using Plotly - Part 1")
library(dplyr)
library(readxl)
library(plotly)
## Importing Data
file <- "salesworkload_tabular.xlsx"
df <- read_xlsx(file)
View(df)
## Simple Barchart : Sales for UK
# Data Aggregation
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,period) %>% summarise(total_sales = sum(sales))
View(df_uk)
# Scatter Plot
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter")
plot
# Bar Chart
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales)
plot
# Scatter Plot
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter")
plot
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/28. Data Visualization Using Plotly - Part 3")
# Scatter Plot : UK Sales for 2009-2019
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,period) %>% summarise(total_sales = sum(sales))
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter")
plot
# Add Text
plot <- plot %>% plot_ly(text = df_uk$total_sales) %>% add_text(textposition = "top right")
# Add Text
plot <- plot %>% add_text(textposition = "top right")
# Scatter Plot : UK Sales for 2009-2019
df_uk <- df %>% filter(Region == "United Kingdom") %>% group_by(Region,period) %>% summarise(total_sales = sum(sales))
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter",text = df_uk$total_sales)
plot
# Add Text
plot <- plot %>% add_text(textposition = "top right")
plot
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter")
plot
# Add Text
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter", text = df_uk$total_sales) %>%
add_text(textposition = "top right") %>% layout(showlegend = FALSE)
plot
# Add Text
plot <- plot_ly(df_uk, x = df_uk$period, y = df_uk$total_sales, type = "scatter", text = "this is text") %>%
add_text(textposition = "top right") %>% layout(showlegend = FALSE)
plot
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/29. Exporting From R Studio")
## Importing Data
file <- "job_listing"
df <- read_csv(file)
View(df)
df <- read.csv(file)
df <- read.csv(file,sep = ";")
## Importing Data
file <- "job_listing.csv"
df <- read.csv(file,sep = ";")
View(df)
## Importing Data
file <- "job_listing.csv"
df <- read.csv(file,sep = ",")
View(df)
## Some Data Manipulation
# Take only "Id,Title,Location,ContractTime,Category"
data_export <- df %>% select(Id,Title,Location,ContractTime,Category)
# Filter for permanent position
data_export <- data_export %>% filter(ContractTime == "permanent")
library(dplyr)
library(plotly)
library(writexl)
## Importing Data
file <- "job_listing.csv"
df <- read.csv(file,sep = ",")
View(df)
View(data_export)
## Some Data Manipulation
# Take only "Id,Title,Location,ContractTime,Category"
data_export <- df %>% select(Id,Title,Location,ContractTime,Category)
View(data_export)
View(df)
## Some Data Manipulation
# Take only "Id,Title,Location,ContractTime,Category,Salary"
data_export <- df %>% select(Id,Title,Location,ContractTime,Category,annual_salary = Salary.per.annum)
View(data_export)
# Filter for permanent position
data_export <- data_export %>% filter(ContractTime == "permanent")
View(data_export)
## Export to CSV
write.csv(data_export,"permanent_job.csv")
## Export to XLSX
write_xlsx(data_export,"permanent_job.xlsx")
# Aggregate data
location_aggregate <- data_export %>% group_by(Location) %>% summarise(num_job = n())
View(location_aggregate)
# Get 10 data only
location_aggregate <- head(location_aggregate,10)
View(location_aggregate)
# Plot the data
fig <- plot_ly(location_aggregate,x = ~num_job, y = ~Location) %>% layout(orientation = "h")
fig
fig
# Plot a histogram
fig <- plot_ly(data_export,y = ~annual_salary,type = "histogram")
fig
# Plot a histogram
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram")
fig
# Plot a histogram
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbins=20)
fig
str(data_export)
# Plot a histogram
str(data_export)
data_export$annual_salary <- as.numeric(data_export$annual_salary)
data_export <- data_export %>% filter(!is.na(annual_salary))
str(data_export)
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbins=20)
fig
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram")
fig
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx = 10)
fig
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx =15)
fig
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx 20)
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx = 20)
fig
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx = 20, color = "white")
fig
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx = 20) %>% layout(bargap = 0.05)
fig
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/29. Exporting From R Studio")
library(dplyr)
library(plotly)
library(writexl)
## Importing Data
file <- "job_listing.csv"
df <- read.csv(file,sep = ",")
View(df)
## Datad Manipulaton
data_export <- df %>% select(Id,Title,Location,ContractTime,Category,annual_salary = Salary.per.annum)
View(data_export)
## Filter for "permanent" position
data_export <- data_export %>% filter(ContractTime == "permanent")
View(data_export)
## Exporting Data to CSV
write.csv(data_export,"permanent_job.csv")
## Exporting Data to XLSX
write_xlsx(data_export,"permanent_job.xlsx")
# Aggregate Data
location <- data_export %>% group_by(Location) %>% summarise(num_job = n())
# Aggregate Data
location_aggregate <- data_export %>% group_by(Location) %>% summarise(num_job = n())
View(location_aggregate)
# Get 10 data only
location_aggregate <- head(location_aggregate,10)
View(location_aggregate)
# Plot the data
fig <- plot_ly(location_aggregate,x = ~num_job, y = ~Location) %>% layout(orientation = "h")
fig
## Histogram
## Data Cleanup
str(data_export)
data_export$annual_salary <- as.numeric(data_export$annual_salary)
## Remove NA
data_export <- data_export %>% filter(!is.na(annual_salary))
str(data_export)
## Plotting
fig <- plot_ly(data_export,x = ~annual_salary,type = "histogram", nbinsx = 20) %>% layout(bargap = 0.05)
fig
