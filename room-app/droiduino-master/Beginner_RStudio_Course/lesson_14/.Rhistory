library(backports)
detach("package:backports", unload = TRUE)
library(plotly)
help("plotly")
x <- 5
text <- "This is RStudio"
today <- Sys.Date()
library(blob)
library(plotly)
help(dplyr)
help("read.csv2")
print("Hello World")
print("Hello World")
# Variable declaration
x <- 10
str <- "This is string"
timeNow <- Sys.time()
x
timeNow
x+y
y <- 5
x+y
print("Hello World")
print("Hello World")
print("Hello World")
## Numeric
x <- 5
y <- 7
x + y
## String / Characters
str <- "This is string"
## Date and time
timeNow <- Sys.time()
dateNow <- Sys.Date()
## Code in section 1
## Code in section 1
## Code in section 1
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
detach("package:dplyr", unload = TRUE)
x <- 5
y <- 10
if (x <= y){
print("X is less than or equal to Y")
} else {
print("X is more than Y")
}
x <- 11
y <- 10
if (x <= y){
print("X is less than or equal to Y")
} else {
print("X is more than Y")
}
# Declare Some Variables
x <- 5
y <- 10
# If Statement
if (x <= y){
print("X is less than or equal to Y")
} else {
print("X is more than Y")
}
# Declare Some Variables
x <- 15
y <- 10
# If Statement
if (x <= y){
print("X is less than or equal to Y")
} else {
print("X is more than Y")
}
x <- 5
for (i in 1:x){
print(i)
}
x <- 10
for (i in 1:x){
print(i)
}
for (i in 1:x){
print(i)
print("Hello World")
}
# Variable Declarations
x <- 10
# Iterate For Statement
for (i in 1:x){
print(i)
print("Hello World")
}
# Variable Declarations
x <- 5
# Iterate For Statement
for (i in 1:x){
print(i)
print("Hello World")
}
text1 <- "Good"
text2 <- "Morning"
text3 <- "Friends"
text4 <- paste(text1,text2,text3,sep=" ")
print(text4)
text5 <- paste0(text1,text2,text3)
print(text5)
text6 <- paste0(text1," ",text2," ",text3)
print(text6)
# Variable declarations
text1 <- "Good"
text2 <- "Morning"
text3 <- "Friends"
# Using paste
text4 <- paste(text1,text2,text3,sep = " ")
print(text4)
# Using paste0
text5 <- paste0(text1,text2,text3)
print(text5)
# Using paste0 --> with separator
text6 <- paste0(text1," ",text2," ",text3)
print(text6)
library(dplyr)
library(readxl)
## Importing Excel Data
excelFile <- "governors_county.xlsx"
excelImport <- read_xlsx(excelFile)
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/16. DPLYR Codes")
excelImport <- read_xlsx(excelFile)
View(excelImport)
?select
## Select Function
voteSelect <- select(excelImport,c(state,percent))
View(voteSelect)
View(voteSelect)
## "Filter" Function
voteFilter <- filter(excelImport,percent < 100)
View(voteFilter)
## "Filter" Function
voteFilter <- filter(excelImport,percent < 70)
View(voteFilter)
## "Mutate" Function
voteMutate <- mutate(excelImport,diff = total_votes - current_votes)
view(voteMutate)
View(voteMutate)
## "Rename" Function
voteRename <- rename(excelImport,StateName = state)
View(voteRename)
library(dplyr)
library(readxl)
## Importing Excel Data
excelFile <- "governors_county.xlsx"
excelImport <- read_xlsx(excelFile)
View(excelImport)
## "Select" Function
voteSelect <- select(excelImport,c(state,percent))
View(voteSelect)
## "Filter" Function
voteFilter <- filter(excelImport,percent < 70)
View(voteFilter)
## "Mutate" Function
voteMutate <- mutate(excelImport,diff = total_votes - current_votes)
View(voteMutate)
## "Rename" Function
voteRename <- rename(excelImport,VotePercentage = percent)
View(voteRename)
## "Merge" Function
csvFile <- "county_state.csv"
csvImport <- read.csv(csvFile)
View(csvImport)
csvImport <- read.csv(csvFile,sep=";")
View(csvImport)
# Combine both dataset
voteMerge <- merge(excelImport,csvImport,by="county")
View(voteMerge)
## "Select" Function
voteSelect <- select(excelImport,c(county,percent))
View(voteSelect)
## Pipe Symbol
votePipe <- excelImport %>% select(county,percent) %>% filter(percent < 70) %>% rename(VotePercentage = percent) %>%
merge(csvImport,by="county")
View(votePipe)
## "Group By + Summarise" Function
voteGroup <- voteMerge %>% group_by(state) %>% summarise(num_of_county = n())
View(vote)
View(voteGroup)
## "Group By + Summarise" Function
voteGroup <- voteMerge %>% group_by(state) %>% summarise(avg_vote_pct=mean(percent)
## "Group By + Summarise" Function
voteGroup <- voteMerge %>% group_by(state) %>% summarise(avg_vote_pct=mean(percent))
## "Group By + Summarise" Function
voteGroup <- voteMerge %>% group_by(state) %>% summarise(avg_vote_pct=mean(percent))
View(voteGroup)
## "Group By + Summarise" Function
voteGroup <- voteMerge %>% group_by(state) %>% summarise(num_of_county=n())
View(voteGroup)
voteGroup <- voteMerge %>% group_by(state) %>% summarise(avg_vote_pct=mean(percent))
View(voteGroup)
library(dplyr)
library(plotly)
## Import data
csvFile <- "governors_county.csv"
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/17. Visualization Using Plotly")
csvImport <- read.csv(csvFile,sep = ",")
View(csvImport)
csvImport <- read.csv(csvFile,sep = ";")
View(csvImport)
## Get State Average vote percentage
voteAvg <- csvImport %>% group_by(state) %>% summarise(avg_vote = mean(percent))
View(voteAvg)
?plot_ly
## Visualiza using plotly
fig <- voteAvg %>% plot_ly(x = state, y = avg_vote, type = "bar")
## Visualiza using plotly
fig <- voteAvg %>% plot_ly(x = ~state, y = ~avg_vote, type = "bar")
fig
fig <- voteAvg %>% plot_ly(x = ~state, y = ~avg_vote, type = "bar", orientation = "h")
fig
fig <- voteAvg %>% plot_ly(y = ~state, x = ~avg_vote, type = "bar", orientation = "h")
fig
##
date <- as.Date(text,"%d-%m-%Y")
date <- as.Date(text)
text <- "23-01-2020"
date <- as.Date(text)
date
date <- as.Date(text,"%d-%m-%Y")
date
text <- "21-11-2019"
date <- as.Date(text,"%d-%m-%Y")
date
text <- "123456"
num <- as.numeric(text)
num
num + 1000
text + 10000
text <- "     this is text      "
text
cleanText <- trimws(text,which = "both")
cleanText
## Extract text from String
text <- "19May2019"
subText <- substr(text,1,5)
subText <- substr(text,1,5)
subText
subText <- substr(text,3)
subText
subText <- substr(text,3)
subText
length(text)
subText <- substr(text,3,nchar(text))
subText
## Remove unwanted character from String
text <- "this is not a text"
removeChar <- sub("not","",text)
removeChar
## EXERCISE
# Take numbers from this string and convert it into number
text "123456a7"
## EXERCISE
# Take numbers from this string and convert it into number
text <- "123456a7"
cleanText <- sub("a","",text)
num <- as.numeric(cleanText)
num
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/16. DPLYR Codes")
library(dplyr)
library(readxl)
## Importing Excel Data
excelFile <- "governors_county.xlsx"
excelImport <- read_xlsx(excelFile)
View(excelImport)
## "Merge" Function
# Import second dataset
csvFile <- "county_state.csv"
csvImport <- read.csv(csvFile,sep=";")
View(csvImport)
library(dplyr)
library(readxl)
## Importing Excel Data
excelFile <- "governors_county.xlsx"
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/16. DPLYR Codes")
excelImport <- read_xlsx(excelFile)
View(excelImport)
## "Select" Function
voteSelect <- select(excelImport, c(county,percent))
View(voteSelect)
## "Filter" Function
voteFilter <- filter(excelImport, percent < 70)
View(voteFilter)
## "Mutate" Function
voteMutate <- mutate(excelImport, diff = total_votes - current_votes)
View(voteMutate)
## "Rename" Function
voteRename <- rename(excelImport, VotePercentage = percent)
View(voteRename)
## "Merge" Function
# Import second dataset
csvFile <- "county_state.csv"
csvImport <- read.csv(csvFile,sep = ";")
View(csvImport)
# Combine both datasets
voteMerge <- merge(excelImport,csvImport,by="county")
View(voteMerge)
## Pipe Symbol ("%>%")
votePipe <- excelImport %>% select(county,percent) %>% filter(percent < 70) %>% rename(VotePercentage = percent) %>%
merge(csvImport,by="county")
View(votePipe)
## Group by and Summarise function
voteGroup <- voteMerge %>% group_by(state) %>% summarise(num_of_county = n())
View(voteGroup)
voteGroup <- voteMerge %>% group_by(state) %>% summarise(avg_vote_pct = mean(percent))
View(voteGroup)
library(dplyr)
library(plotly)
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/17. Visualization Using Plotly")
## Import Data
csvFile <- "governors_county.csv"
csvImport <- read.csv(csvFile,sep = ";")
View(csvImport)
## Calculate Average Vote Percentage per State
voteAvg <- csvImport %>% group_by(state) %>% summarise(avg_vote = mean(percent))
View(voteAvg)
## Visualize the data
fig <- voteAvg %>% plot_ly(x = ~state, y = ~avg_vote, type = "bar")
fig
fig <- voteAvg %>% plot_ly(x = ~avg_vote, y = ~state, type = "bar", orientation = "h")
fig
setwd("~/Dropbox (Emerald Core Games)/Droiduino Courses2/14. Data Cleansing and Wrangling")
## String to Date
## String to Date
text <- "21-11-2019"
date <- as.Date(text,"%d-%m-%Y")
date
typeof(text)
typeof(date)
## String to Number
text <- "123456"
typeof(text)
num <- as.numeric(text)
num
typeof(num)
num + 10000
## Remove White Space
text <- "          this is a text         "
text
cleanText <- trimws(text, which = "both")
cleanText
## Extract text from String
text <- "19May2019"
text
subText <- substr(text,1,5)
subText
subText <- substr(text,3,nchar(text))
subText
## Remove Unwanted Characters from String
text <- "this is not a text"
removeChar <- sub("not","",text)
text
removeChar
